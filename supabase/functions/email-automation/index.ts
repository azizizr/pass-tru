import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { Resend } from "npm:resend@2.0.0";
import QRCode from "npm:qrcode@1.5.3";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface EmailAutomationRequest {
  type: 'attendee-confirmation' | 'post-checkin' | 'client-welcome';
  eventId?: string;
  attendeeId?: string;
  clientId?: string;
  attendeeIds?: string[];
  templateId?: string;
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { type, eventId, attendeeId, clientId, attendeeIds, templateId }: EmailAutomationRequest = await req.json();

    switch (type) {
      case 'attendee-confirmation':
        if (attendeeIds && eventId) {
          return await sendBulkAttendeeConfirmations(attendeeIds, eventId, templateId);
        } else if (attendeeId && eventId) {
          return await sendSingleAttendeeConfirmation(attendeeId, eventId, templateId);
        }
        break;
      
      case 'post-checkin':
        if (attendeeId && eventId) {
          return await sendPostCheckinEmail(attendeeId, eventId, templateId);
        }
        break;
      
      case 'client-welcome':
        if (clientId) {
          return await sendClientWelcomeEmail(clientId, templateId);
        }
        break;
    }

    return new Response(
      JSON.stringify({ error: "Invalid request parameters" }),
      { status: 400, headers: { "Content-Type": "application/json", ...corsHeaders } }
    );

  } catch (error: any) {
    console.error("Error in email-automation function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { "Content-Type": "application/json", ...corsHeaders } }
    );
  }
};

async function generateQRCode(data: string, options = {}): Promise<string> {
  try {
    const qrCodeDataUrl = await QRCode.toDataURL(data, {
      width: 200,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      },
      ...options
    });
    return qrCodeDataUrl;
  } catch (error) {
    console.error('Error generating QR code:', error);
    throw error;
  }
}

function generateICSFile(
  eventName: string, 
  eventDate: string, 
  eventVenue: string, 
  organizerEmail = "noreply@passtru.com",
  timezone = "UTC"
): string {
  const startDate = new Date(eventDate);
  const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000); // 2 hours duration
  
  const formatDate = (date: Date) => {
    return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };

  const uid = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}@passtru.com`;

  return `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//PassTru//Event Management//EN
CALSCALE:GREGORIAN
METHOD:REQUEST
BEGIN:VTIMEZONE
TZID:${timezone}
END:VTIMEZONE
BEGIN:VEVENT
UID:${uid}
DTSTAMP:${formatDate(new Date())}
DTSTART:${formatDate(startDate)}
DTEND:${formatDate(endDate)}
SUMMARY:${eventName}
DESCRIPTION:Event managed by PassTru - Access Made Effortless\\n\\nLocation: ${eventVenue}\\n\\nThis event invitation was generated by PassTru Event Management.
LOCATION:${eventVenue}
ORGANIZER;CN=PassTru:mailto:${organizerEmail}
STATUS:CONFIRMED
TRANSP:OPAQUE
SEQUENCE:0
BEGIN:VALARM
TRIGGER:-PT1H
ACTION:DISPLAY
DESCRIPTION:Reminder: ${eventName} starts in 1 hour
END:VALARM
END:VEVENT
END:VCALENDAR`;
}

async function getEmailTemplate(templateId: string | undefined, templateType: string, clientId?: string) {
  if (templateId) {
    const { data: template } = await supabase
      .from('email_templates')
      .select('*')
      .eq('id', templateId)
      .eq('is_active', true)
      .single();
    
    if (template) return template;
  }

  // Fallback to default template
  const { data: defaultTemplate } = await supabase
    .from('email_templates')
    .select('*')
    .eq('template_type', templateType)
    .eq('is_default', true)
    .or(`client_id.eq.${clientId},client_id.is.null`)
    .order('client_id', { ascending: false }) // Prefer client-specific templates
    .limit(1)
    .single();

  return defaultTemplate;
}

function replaceTemplateVariables(text: string, variables: Record<string, string>) {
  let result = text;
  Object.entries(variables).forEach(([key, value]) => {
    const regex = new RegExp(`{${key}}`, 'g');
    result = result.replace(regex, value || '');
  });
  return result;
}

async function getBrandSettings(clientId?: string) {
  if (!clientId) return null;
  
  const { data: brandSettings } = await supabase
    .from('brand_settings')
    .select('*')
    .eq('client_id', clientId)
    .single();
    
  return brandSettings;
}

async function sendSingleAttendeeConfirmation(attendeeId: string, eventId: string, templateId?: string): Promise<Response> {
  // Get attendee and event details
  const { data: attendee, error: attendeeError } = await supabase
    .from('attendees')
    .select(`
      *,
      events (
        *,
        client_events (
          profiles (*)
        )
      )
    `)
    .eq('id', attendeeId)
    .single();

  if (attendeeError || !attendee) {
    throw new Error('Attendee not found');
  }

  const event = attendee.events;
  const clientId = event.client_events?.[0]?.profiles?.id;
  const brandSettings = await getBrandSettings(clientId);
  
  // Get email template
  const template = await getEmailTemplate(templateId, 'confirmation', clientId);
  if (!template) {
    throw new Error('No email template found');
  }

  // Generate QR code with enhanced data
  const qrCodeData = JSON.stringify({
    eventSlug: event.slug,
    attendeeId: attendee.id,
    uniqueId: attendee.unique_id,
    timestamp: Date.now(),
    version: '2.0'
  });
  const qrCodeDataUrl = await generateQRCode(qrCodeData);

  // Generate calendar invite
  const icsContent = generateICSFile(
    event.name, 
    event.date, 
    event.venue,
    brandSettings?.email_from_address || "noreply@passtru.com",
    brandSettings?.timezone || "UTC"
  );

  // Prepare template variables
  const templateVariables = {
    attendee_name: attendee.full_name,
    event_name: event.name,
    event_date: new Date(event.date).toLocaleDateString(),
    event_venue: event.venue,
    unique_id: attendee.unique_id,
    qr_code: `<img src="${qrCodeDataUrl}" alt="QR Code" style="max-width: 200px; display: block; margin: 10px auto;">`,
    calendar_invite: 'Calendar invite attached',
    organizer_name: brandSettings?.company_name || 'Event Team',
    portal_url: `https://yeyykilyhsdlippwfljs.supabase.co/${event.slug}/${attendee.unique_id}`,
    custom_message: event.custom_message || '',
    checkin_time: '8:00 AM'
  };

  // Process custom fields for seat/table assignments
  const customFields = attendee.custom_fields || {};
  if (customFields.seat) {
    templateVariables.seat_assignment = `Seat: ${customFields.seat}`;
  } else if (customFields.table) {
    templateVariables.seat_assignment = `Table: ${customFields.table}`;
  } else {
    templateVariables.seat_assignment = '';
  }
  templateVariables.table_assignment = customFields.table || '';

  // Replace variables in template
  const subject = replaceTemplateVariables(template.subject, templateVariables);
  const content = replaceTemplateVariables(template.content, templateVariables);

  // Create email campaign record
  const { data: campaign, error: campaignError } = await supabase
    .from('email_campaigns')
    .insert({
      event_id: eventId,
      name: `Confirmation Email - ${attendee.full_name}`,
      subject,
      content: `Template: ${template.name}`,
      template_type: 'confirmation',
      recipients_count: 1,
      status: 'sending',
      custom_template_id: template.id,
      brand_settings: brandSettings || {}
    })
    .select()
    .single();

  if (campaignError) {
    console.error('Error creating campaign:', campaignError);
  }

  // Create enhanced HTML email
  const emailHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <style>
        body { 
          font-family: Arial, sans-serif; 
          max-width: 600px; 
          margin: 0 auto; 
          padding: 20px; 
          background-color: #f9fafb;
        }
        .container {
          background: white;
          border-radius: 8px;
          padding: 30px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header { 
          text-align: center; 
          border-bottom: 2px solid ${brandSettings?.primary_color || '#3b82f6'}; 
          padding-bottom: 20px; 
          margin-bottom: 30px; 
        }
        .content { line-height: 1.6; }
        .qr-section { 
          text-align: center; 
          background: #f8fafc; 
          padding: 20px; 
          border-radius: 8px; 
          margin: 20px 0; 
        }
        .event-details { 
          background: #f1f5f9; 
          padding: 15px; 
          border-radius: 8px; 
          margin: 15px 0; 
        }
        .unique-id { 
          font-size: 24px; 
          font-weight: bold; 
          color: ${brandSettings?.primary_color || '#3b82f6'}; 
          text-align: center; 
          margin: 10px 0; 
        }
        .footer {
          margin-top: 30px;
          padding-top: 20px;
          border-top: 1px solid #e5e7eb;
          text-align: center;
          color: #6b7280;
          font-size: 12px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          ${brandSettings?.logo_url ? `<img src="${brandSettings.logo_url}" alt="Logo" style="max-height: 60px; margin-bottom: 10px;">` : ''}
          <h1 style="color: ${brandSettings?.primary_color || '#3b82f6'};">${subject}</h1>
          <p style="color: #6b7280;">${brandSettings?.company_name || 'PassTru'} - Access Made Effortless</p>
        </div>
        
        <div class="content">
          ${content.split('\n').map(line => `<p>${line}</p>`).join('')}
        </div>
        
        <div class="footer">
          ${brandSettings?.email_footer_text || 'Powered by PassTru Event Management'}
        </div>
      </div>
    </body>
    </html>
  `;

  const emailResponse = await resend.emails.send({
    from: `${brandSettings?.email_from_name || 'PassTru'} <${brandSettings?.email_from_address || 'onboarding@resend.dev'}>`,
    to: [attendee.email],
    subject,
    html: emailHtml,
    attachments: [
      {
        filename: 'event.ics',
        content: Buffer.from(icsContent).toString('base64')
      }
    ]
  });

  // Log delivery and update campaign
  if (campaign) {
    await supabase.from('email_delivery_logs').insert({
      campaign_id: campaign.id,
      attendee_id: attendeeId,
      email_address: attendee.email,
      status: emailResponse.error ? 'failed' : 'sent',
      external_id: emailResponse.data?.id,
      error_message: emailResponse.error?.message
    });

    await supabase
      .from('email_campaigns')
      .update({
        status: emailResponse.error ? 'failed' : 'sent',
        sent_at: new Date().toISOString(),
        sent_count: emailResponse.error ? 0 : 1,
        failed_count: emailResponse.error ? 1 : 0
      })
      .eq('id', campaign.id);
  }

  // Update attendee QR code URL if successful
  if (!emailResponse.error && qrCodeDataUrl) {
    await supabase
      .from('attendees')
      .update({ 
        qr_code_url: qrCodeDataUrl,
        portal_access_enabled: true 
      })
      .eq('id', attendeeId);
  }

  return new Response(JSON.stringify(emailResponse), {
    status: 200,
    headers: { "Content-Type": "application/json", ...corsHeaders }
  });
}

async function sendBulkAttendeeConfirmations(attendeeIds: string[], eventId: string, templateId?: string): Promise<Response> {
  const results = [];
  
  for (const attendeeId of attendeeIds) {
    try {
      const result = await sendSingleAttendeeConfirmation(attendeeId, eventId, templateId);
      results.push({ attendeeId, success: true });
    } catch (error) {
      console.error(`Failed to send email to attendee ${attendeeId}:`, error);
      results.push({ attendeeId, success: false, error: error.message });
    }
  }

  return new Response(JSON.stringify({ results }), {
    status: 200,
    headers: { "Content-Type": "application/json", ...corsHeaders }
  });
}

async function sendPostCheckinEmail(attendeeId: string, eventId: string, templateId?: string): Promise<Response> {
  const { data: attendee, error: attendeeError } = await supabase
    .from('attendees')
    .select(`
      *,
      events (
        *,
        client_events (
          profiles (*)
        )
      )
    `)
    .eq('id', attendeeId)
    .single();

  if (attendeeError || !attendee) {
    throw new Error('Attendee not found');
  }

  const event = attendee.events;
  const clientId = event.client_events?.[0]?.profiles?.id;
  const brandSettings = await getBrandSettings(clientId);
  
  // Get email template
  const template = await getEmailTemplate(templateId, 'post_checkin', clientId);
  if (!template) {
    throw new Error('No email template found');
  }

  const customFields = attendee.custom_fields || {};
  const seatInfo = customFields.seat || customFields.table || null;

  const templateVariables = {
    attendee_name: attendee.full_name,
    event_name: event.name,
    portal_url: `https://yeyykilyhsdlippwfljs.supabase.co/${event.slug}/${attendee.unique_id}`,
    seat_assignment: seatInfo ? `Your ${customFields.table ? 'table' : 'seat'} assignment: ${seatInfo}` : '',
    organizer_name: brandSettings?.company_name || 'Event Team'
  };

  const subject = replaceTemplateVariables(template.subject, templateVariables);
  const content = replaceTemplateVariables(template.content, templateVariables);

  const emailHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; border-bottom: 2px solid #10b981; padding-bottom: 20px; margin-bottom: 30px; }
        .content { line-height: 1.6; }
        .success-box { background: #dcfce7; border: 1px solid #10b981; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>✅ ${subject}</h1>
        <p style="color: #6b7280;">${brandSettings?.company_name || 'PassTru'} - Access Made Effortless</p>
      </div>
      
      <div class="content">
        ${content.split('\n').map(line => `<p>${line}</p>`).join('')}
      </div>
    </body>
    </html>
  `;

  const emailResponse = await resend.emails.send({
    from: `${brandSettings?.email_from_name || 'PassTru'} <${brandSettings?.email_from_address || 'onboarding@resend.dev'}>`,
    to: [attendee.email],
    subject,
    html: emailHtml
  });

  return new Response(JSON.stringify(emailResponse), {
    status: 200,
    headers: { "Content-Type": "application/json", ...corsHeaders }
  });
}

async function sendClientWelcomeEmail(clientId: string, templateId?: string): Promise<Response> {
  const { data: client, error: clientError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', clientId)
    .single();

  if (clientError || !client) {
    throw new Error('Client not found');
  }

  const brandSettings = await getBrandSettings(clientId);
  
  // Get email template
  const template = await getEmailTemplate(templateId, 'welcome', clientId);
  if (!template) {
    throw new Error('No email template found');
  }

  // Get assigned events
  const { data: clientEvents } = await supabase
    .from('client_events')
    .select('events(*)')
    .eq('client_id', clientId);

  const assignedEvents = clientEvents?.map(ce => ce.events) || [];

  const templateVariables = {
    attendee_name: client.full_name || client.email,
    event_name: assignedEvents[0]?.name || 'Your Events',
    organizer_name: brandSettings?.company_name || 'PassTru Team'
  };

  const subject = replaceTemplateVariables(template.subject, templateVariables);
  const content = replaceTemplateVariables(template.content, templateVariables);

  const emailHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; border-bottom: 2px solid #3b82f6; padding-bottom: 20px; margin-bottom: 30px; }
        .content { line-height: 1.6; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${subject}</h1>
        <p style="color: #6b7280;">PassTru - Access Made Effortless</p>
      </div>
      
      <div class="content">
        ${content.split('\n').map(line => `<p>${line}</p>`).join('')}
      </div>
    </body>
    </html>
  `;

  const emailResponse = await resend.emails.send({
    from: `${brandSettings?.email_from_name || 'PassTru'} <${brandSettings?.email_from_address || 'onboarding@resend.dev'}>`,
    to: [client.email],
    subject,
    html: emailHtml
  });

  return new Response(JSON.stringify(emailResponse), {
    status: 200,
    headers: { "Content-Type": "application/json", ...corsHeaders }
  });
}

serve(handler);
